---
import type { GetStaticPaths } from "astro";
import MainLayout from "../../layouts/MainLayout.astro";
import PokemonCard from "../../components/PokemonCard.astro";
import type { PokemonListResponse } from "../../interfaces/pokemon-list.response";
import "../../base.css";
import Title from "@components/shared/Title.astro";
import { Icon } from "astro-icon/components";

export const getStaticPaths = (async () => {
  const resp = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
  const { results } = (await resp.json()) as PokemonListResponse;

  return results.map(({ name, url }) => {
    console.log({ url });
    return {
      params: { name },
      props: { name, url },
    };
  });
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;
const id = url.split("/").at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout
  title={`Pokémon - #${id} ${name}`}
  description={`Información sobre el pokemon ${name}`}
  image={imageSrc}
>
  <section class="flex flex-col justify-center items-center min-h-screen">
    <div class="flex flex-row gap-2">
      <div class="flex flex-col items-start">
        <!-- <a href="/" class="hover:underline text-blue-500">Regresar</a> -->
        <button class="text-blue-500" onclick="history.back()">
          Regresar
        </button>
        <Title>{name}</Title>
      </div>

      <button
        class="ml-4 text-red-600"
        id="btn-favorite"
        data-name={name}
        data-id={id}
      >
        <Icon data-outline name="heart-outline" size={50} />
        <Icon data-full name="heart-full" size={50} class="hidden" />
      </button>
    </div>

    <PokemonCard name={name} url={url} isBig={true} />
    <audio controls class="mt-5">
      <source src={audioSrc} type="audio/ogg" />
      Your browser does not support the audio element
    </audio>
  </section>
</MainLayout>

<script>
import type { FavoritePokemon } from "@interfaces/favorite-pokemon";

  const handlePageLoad = () => {
    let favoritePokemons: FavoritePokemon[] = JSON.parse(                                 // Definición de localStorage
      localStorage.getItem("favorites") ?? "[]"                                           // Se busca la entrada "favorites" y si no existe []
    );

    const btnFavorite = document.querySelector(                                           // Identificación del boton del corazón
      "#btn-favorite"
    ) as HTMLButtonElement;

    if (!btnFavorite) return;

    const name = btnFavorite.dataset.name ?? "";                                          // Desde el boton obtenemos el name
    const id = btnFavorite.dataset.id ?? "";                                              // el id
    const isFavorite = favoritePokemons.some((fav) => fav.name === name);                 // y si el name del pokemon está en el [favorites]

    const heartOutline = btnFavorite.querySelector(                                       // Identificamos el corazón vacio
      "[data-outline]"
    ) as HTMLElement;
    const heartFull = btnFavorite.querySelector("[data-full]") as HTMLElement;            // Identificamos el corazón relleno  

    if (isFavorite) {                                                                     // Si el pokemon esta en favoritos al dar click en el corazón
      heartOutline.classList.add("hidden");                                               // ocultamos el corazón vacio
      heartFull.classList.remove("hidden");                                               // y mostramos el corazón relleno quitando la clase hidden
    }

    const toggleFavorite = () => {
      const isFavorite = favoritePokemons.some((fav) => fav.name === name);               // Obtenemos si el pokemon es o no favorito

      if (isFavorite) {                                                                   // Si lo es
        favoritePokemons = favoritePokemons.filter((fav) => fav.name !== name);           // se borra de favoritePokemons
      } else {
        favoritePokemons.push({                                                           // Si no lo es se agrega
          id: +id,                                    
          name: name,
        });
      }

      localStorage.setItem("favorites", JSON.stringify(favoritePokemons));                // Se establece en localStorage favoritePokemons
    };

    btnFavorite.addEventListener("click", () => {                                         // Cada vez que se pulse el boton del corazón
      heartOutline.classList.toggle("hidden");                                            // se cambiará al contrario la clase hidden en el corazón vacio
      heartFull.classList.toggle("hidden");                                               // y lo mismo en el boton del corazón relleno
      toggleFavorite();                                                                   // Se actualiza el localstorage
    });

  };

  document.addEventListener("astro:page-load", () => handlePageLoad());                   // cada vez que se cargue la página se llama handlePageLoad -> listener btnFavorite -> toggleFavorite
</script>
